name: Medusa B2B Deploy

on:
  push:
    branches:
      - main # Убедитесь, что это имя вашей основной ветки (например, master)

# --- Переменные окружения для ВСЕГО JOB-а ---
# Здесь мы определяем все переменные окружения, включая те, что из секретов GitHub.
# Они будут доступны для ВСЕХ ШАГОВ в этом JOB.

jobs:
  deploy:
    runs-on: ubuntu-latest # Вы можете использовать self-hosted runner, если нужно

    steps:
      - name: Checkout code
        # Выгружает код из вашего репозитория
        uses: actions/checkout@v4

      # Пропускаем шаги сборки (например, yarn install, build) на CI runner,
      # поскольку они будут выполнены вручную на сервере в первый раз.

      - name: Copy project files to server
        # Используем action для копирования файлов по SCP
        uses: appleboy/scp-action@v0.1.4 # Проверьте наличие более новой версии, если хотите
        with:
          host: ${{ secrets.SSH_HOST }} # IP-адрес сервера из секретов GitHub
          username: ${{ secrets.SSH_USER }} # Имя пользователя SSH из секретов GitHub
          key: ${{ secrets.SERVER_SSH_KEY }} # Приватный SSH-ключ из секретов GitHub
          port: ${{ secrets.SSH_PORT }} # Порт SSH из секретов GitHub (опционально, по умолчанию 22)
          source: "./" # Копируем все файлы и папки из корня репозитория
          target: "/home/admin2/ars-backend" # Целевая директория на сервере
          # Опционально: исключите определенные директории/файлы при копировании
          # exclude: ".git,.github,node_modules,dist"

      - name: Configure and Restart Medusa service
        # Используем action для выполнения команды по SSH
        uses: appleboy/ssh-action@v1.0.0 # Проверьте наличие более новой версии, если хотите
        with:
          host: ${{ secrets.SSH_HOST }} # IP-адрес сервера из секретов GitHub
          username: ${{ secrets.SSH_USER }} # Имя пользователя SSH из секретов GitHub
          key: ${{ secrets.SERVER_SSH_KEY }} # Приватный SSH-ключ из секретов GitHub
          port: ${{ secrets.SSH_PORT }} # Порт SSH из секретов GitHub (опционально, по умолчанию 22)

          script: |
            echo "Executing deployment script on server..."

            # Переходим в директорию проекта на сервере
            cd /home/admin2/ars-backend || { echo "Error: Directory /home/admin2/ars-backend not found"; exit 1; }   

            # Загрузка окружения NVM
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            # --- Установка зависимостей ---
            echo "Running yarn install..."
            # Используем --frozen-lockfile в CI/CD для предсказуемости
            # --production пропустит devDependencies
            yarn install --production --frozen-lockfile || { echo "Error: yarn install failed"; exit 1; }
            echo "yarn install finished."  

            # --- Сборка проекта ---
            # Medusa часто требует сборки (например, компиляция TypeScript) перед запуском.
            echo "Running yarn build..."
            yarn build || { echo "Error: yarn build failed"; exit 1; }
            echo "yarn build finished."

            # --- Восстанавливаем .env ---
            - name: Restore .env
              run: |
                if [ -f /home/admin2/secrets/.env-backend ]; then
                  cp /home/admin2/secrets/.env-backend .env
                  echo ".env restored"
                else
                  echo "No .env-backend to copy"
                fi




            # --- ВАЖНО ---
            # Этот рабочий процесс ПРЕДПОЛАГАЕТ, что вы ВРУЧНУЮ выполнили ПЕРВОНАЧАЛЬНУЮ настройку
            # ПОСЛЕ САМОГО ПЕРВОГО успешного копирования файлов этим рабочим процессом.

            echo "Checking PM2 process 'ars-backend' status..."

            # Проверяем, существует ли процесс с именем 'ars-backend'
            # > /dev/null 2>&1 скрывает стандартный вывод и ошибки pm2 show
            if pm2 show ars-backend > /dev/null 2>&1; then
              # Процесс существует, перезапускаем его
              echo "PM2 process 'ars-backend' found. Attempting restart..."
              pm2 restart ars-backend || { echo "Error: Failed to restart PM2 process 'ars-backend'. Check PM2 logs on the server."; exit 1; }
              echo "PM2 process 'ars-backend' restarted successfully."
            else
              # Процесс не найден, запускаем его впервые
              echo "PM2 process 'ars-backend' not found. Attempting to start for the first time..."
              # !!! ВАЖНО: Замените 'yarn start' на вашу фактическую команду запуска Medusa !!!
              # Например: node build/index.js, npm start, или yarn start
              # Для 'yarn start' команда для PM2 обычно выглядит так: pm2 start yarn --name ars-backend -- start
              pm2 start yarn --name ars-backend -- start || { echo "Error: Failed to start PM2 process 'ars-backend'. Check PM2 logs on the server and ensure dependencies are installed."; exit 1; }
              echo "PM2 process 'ars-backend' started successfully."
            fi

            echo "Deployment script finished."
